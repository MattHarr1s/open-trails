<?php
/**
 * trail quail rating system
 *
 * this rating will be the overall rating of a specific trail, it will be generated by individual user ratings
 *
 * @authur George Kephart <gkephart@gmail.com>
 */

class trailRating {
	/**
	 * id for the indivdual trail the rating is based on.
	 * @var int $trailId
	 */
	private $trailId;
	/**
	 * id of the user that has posted a rating about a specific trail
	 * @var int $userId
	 */
	private $userId;
	/**
	 * the rating value given by the user about a specific trail
	 * @var int $ratingValue
	 */
	private  $ratingValue;


	/**
	 * constructor for this rating
	 *
	 * @param int $newTrailId id of the specific trail the rating is about
	 * @param int $newUserId id of the user who posted the rating
	 * @param int $newRatingValue value of the rating
	 * @throws InvalidArgumentException if the data types are not valid
	 * @throws RangeException if data values are out of bounds
	 * @throws Exception if some other exception is thrown
	 */
	public function __construct($newTrailId, $newUserId, $newRatingValue = null) {
		try{
			$this->setTrailId($newTrailId);
			$this->setUserId($newUserId);
			$this->setRatingValue($newRatingValue);
		} catch(InvalidArgumentException $invalidArgument) {
			// rethrow the exception to the caller
			throw(new InvalidArgumentException($invalidArgument->getMessage(), 0, $invalidArgument));
		} catch(RangeException $range) {
			// rethrow the exception to the caller
			throw(new RangeException($range->getMessage(), 0, $range));
		} catch(Exception $exception) {
			// rethrow generic exception
			throw(new Exception($exception->getMessage(), 0, $exception));
		}
	}
	/**
	 * accessor method for trailId
	 *
	 * @return int value of trail id
	 */
	public function getTrailId() {
		return $this->trailId;
	}
	/**
	 * mutator method for trail id
	 *
	 * @param int $newTrailId new value of trail id
	 * @throws InvalidArgumentException if $newTrailId is not an integer or not positive
	 * @throws RangeException if $newTrailId is not positive
	 */
	public function setTrailId($newTrailId) {
		// verify the trail id is valid
		$newTrailId = filter_var($newTrailId, FILTER_VALIDATE_INT);
		if($newTrailId === false) {
			throw(new InvalidArgumentException("trail id is not a valid integer"));
		}

		// verify the trail id is positive
		if($newTrailId <= 0) {
			throw(new RangeException("trail id is not positive"));
		}

		//convert and store the trail id
		$this->trailId = intval($newTrailId);
	}

	/**
	 * accessor method for user id
	 *
	 * @return int value of user id
	 */
	public function getUserId() {
		return $this->userId;
	}
	/**
	 * mutator method for user id
	 *
	 * @param int $newUserId new value of user id
	 * @throws InvalidArgumentException if $newUserId is not an integer or not positive
	 * @throws RangeException if $newUserId is not positive
	 */
	public function setUserId($newUserId) {
		// verify the user id is valid
		$newUserId = filter_var($newUserId, FILTER_VALIDATE_INT);
		if($newUserId === false) {
			throw(new InvalidArgumentException("profile id is not a valid integer"));
		}

		// verify the user id is positive
		if($newUserId <= 0) {
			throw(new RangeException('trail id is not positive'));
		}

		//convert and store the user id
		$this->userId = intval($newUserId);
	}
	/**
	 * accessor method for rating
	 *
	 * @return int value of the rating
	 */
	public function getRatingValue() {
		return $this->ratingValue;
	}


}