<?php
/**
 * trail quail rating system
 *
 * this rating will be the overall rating of a specific trail, it will be generated by individual user ratings
 *
 * @authur George Kephart <gkephart@gmail.com>
 */

class Rating {
	/**
	 * id for the indivdual trail the rating is based on.
	 * @var int $trailId
	 */
	private $trailId;

	//blah
	/**
	 * id of the user that has posted a rating about a specific trail
	 * @var int $userId
	 */
	private $userId;
	/**
	 * the rating value given by the user about a specific trail
	 * @var int $ratingValue
	 */
	private  $ratingValue;


	/**
	 * constructor for this rating
	 *
	 * @param int $newTrailId id of the specific trail the rating is about
	 * @param int $newUserId id of the user who posted the rating
	 * @param int $newRatingValue value of the rating
	 * @throws InvalidArgumentException if the data types are not valid
	 * @throws RangeException if data values are out of bounds
	 * @throws Exception if some other exception is thrown
	 */
	public function __construct($newTrailId, $newUserId, $newRatingValue = null) {
		try{
			$this->setTrailId($newTrailId);
			$this->setUserId($newUserId);
			$this->setRatingValue($newRatingValue);
		} catch(InvalidArgumentException $invalidArgument) {
			// rethrow the exception to the caller
			throw(new InvalidArgumentException($invalidArgument->getMessage(), 0, $invalidArgument));
		} catch(RangeException $range) {
			// rethrow the exception to the caller
			throw(new RangeException($range->getMessage(), 0, $range));
		} catch(Exception $exception) {
			// rethrow generic exception
			throw(new Exception($exception->getMessage(), 0, $exception));
		}
	}
	/**
	 * accessor method for trailId
	 *
	 * @return int value of trail id
	 */
	public function getTrailId() {
		return $this->trailId;
	}
	/**
	 * mutator method for trail id
	 *
	 * @param int $newTrailId new value of trail id
	 * @throws InvalidArgumentException if $newTrailId is not an integer or not positive
	 * @throws RangeException if $newTrailId is not positive
	 */
	public function setTrailId($newTrailId) {
		// verify the trail id is valid
		$newTrailId = filter_var($newTrailId, FILTER_VALIDATE_INT);
		if($newTrailId === false) {
			throw(new InvalidArgumentException("trail id is not a valid integer"));
		}

		// verify the trail id is positive
		if($newTrailId <= 0) {
			throw(new RangeException("trail id is not positive"));
		}

		//convert and store the trail id
		$this->trailId = intval($newTrailId);
	}

	/**
	 * accessor method for user id
	 *
	 * @return int value of user id
	 */
	public function getUserId() {
		return $this->userId;
	}
	/**
	 * mutator method for user id
	 *
	 * @param int $newUserId new value of user id
	 * @throws InvalidArgumentException if $newUserId is not an integer or not positive
	 * @throws RangeException if $newUserId is not positive
	 */
	public function setUserId($newUserId) {
		// verify the user id is valid
		$newUserId = filter_var($newUserId, FILTER_VALIDATE_INT);
		if($newUserId === false) {
			throw(new InvalidArgumentException("profile id is not a valid integer"));
		}

		// verify the user id is positive
		if($newUserId <= 0) {
			throw(new RangeException('trail id is not positive'));
		}

		//convert and store the user id
		$this->userId = intval($newUserId);
	}
	/**
	 * accessor method for rating
	 *
	 * @return int value of the rating
	 */
	public function getRatingValue() {
		return $this->ratingValue;
	}
		/**
		 * mutator method for rating value
		 *
		 * @param int $newRatingValue nex value of the user rating
		 * @throws InvalidArgumentException if $newRatingValue is not an integer or positive
		 * @throws RangeException if $newRating value is not positive
		 */
		public function setRatingValue ($newRatingValue){
			// verify the rating value is positive
			$newRatingValue = filter_var($newRatingValue, FILTER_VALIDATE_INT);
			if ($newRatingValue === false) {
				throw(new InvalidArgumentException("rating value is not positive"));
			}
			// verify the rating value value is positive
			if($newRatingValue <=0){
				throw(new RangeException("rating value is not positive"));
			}
			// convert and store the rating value
			$this->ratingValue = intval($newRatingValue);
		}
	/**
	 * inserts this rating into mySQL
	 *
	 * @param PDO $pdo PDO connection object
	 * @throws PDOException when mysql errors occur
	 */
	public function insert(PDO $pdo){
		// enforce the trailId and userId is null
		if($this->trailId !== null) {
			throw(new PDOException("not a new rating; trail id has been used"));
		}
		if($this->userId !== null) {
			throw(new PDOException("not a new rating; user id has been used"));
		}

		//create query template
		$query = "INSERT INTO trailRating(trailId, userId, ratingValue) VALUES(:trailId, :userId, :ratingValue) ";
		$statement = $pdo->prepare($query);

		//bind the member variables to the place holder
		$parameters = ["trailId"=>$this->trailId, "userId"=>$this->userId, $this->ratingValue];
		$statement->execute($parameters);


	}
	/**
	 * deletes a user generated  trail rating from  mySQl
	 *
	 * @param PDO $pdo PDO connection object
	 * @throws PDOException when a mySQl related error occurs
	 */
	public function delete(PDO $pdo) {
		// enforce that both trailId and userId is not null
		if ($this->trailId === null) {
			throw(new PDOException("unable to delete a rating about trail that doesn't exist"));
		}
		if ($this->userId === null) {
			throw (new PDOException("unable to delete to delete a rating that a user didn't post"));
		}
		// create query template
		$query = "DELETE FROM rating  WHERE trailId = :tralId and  userId = :userId";
		$statement = $pdo->prepare($query);

		//bind the member variables to the place holder in the template
		$parameters = ["trailId=>$this->trailId, userId=>$this->userId" ];
		$statement->execute($parameters);
	}
	/**
	 * updates this rating in mySQL
	 *
	 * @param PDO $pdo PDO connection object
	 * @throws PDOException when mySQL related errors occur
	 */
	public function update(PDO $pdo) {
		// enforce the trailId and userId is null
		if($this->trailId !== null) {
			throw(new PDOException("not a new rating; trail id has been used"));
		}
		if($this->userId !== null) {
			throw(new PDOException("not a new rating; user id has been used"));
		}
		//create query template
		$query = "UPDATE trailRating SET trailId = :trailId ,userId = :userId, ratingValue = :ratingValue";
		$statement = $pdo->prepare($query);

		//bind the member variables to the place holder
		$parameters = ["trailId"=>$this->trailId, "userId"=>$this->userId, $this->ratingValue];
		$statement->execute($parameters);
	}
	/**
	 * gets rating from rating value
	 *
	 * @param PDO $pdo PDO  connection object
	 * @param int $ratingValue
	 * @returns SplFixedArray all ratings for the trail
	 * @throws PDOException when mySQL error occurs
	 */
	public static function geRatingByRatingValue(PDO $pdo, $ratingValue) {
		$ratingValue = trim($ratingValue);
		$ratingValue = filter_var($ratingValue, FILTER_VALIDATE_INT);
		if(empty($ratingValue) === true) {
			throw(new PDOException("rating value is invalid"));
		}

		// create query template
		$query = "select trailId, userId, ratingValue FROM rating WHERE ratingValue Like :RatingValue";
		$statement = $pdo->prepare($query);

		//bind the rating value to the place holder in the template
		$ratingValue = "%$ratingValue%";
		$parameters = ["ratingValue" => $ratingValue];
		$statement->execute($parameters);

		// build an array of rating values
		$ratings = new SplFixedArray($statement->rowCount());
		$statement->setFetchMode(PDO::FETCH_ASSOC);
		while(($row = $statement->fetch()) !== false) {
			try {
				$rating = new Rating($row["userId"], $row["trailId"], $row["ratingValue"]);
				$ratings[$ratings->key()] = $rating;
				$ratings -> next();
			} catch(Exception $exception) {
				// if the row couldn't be converted rethrow it
				throw(new PDOException($exception->getMessage(), 0, $exception));
			}
		}
		return($ratings);
	}
	/**
	 * gets the trail rating by trailId
	 *
	 * @param PDO $pdo PDO Connection object
	 * @param int $trailId trail id to search for
	 * @return int found rating value found or null if not found
	 * @throws PDOException when mySql related error occurs
	 */

	public static  function getRatingValueByTrailId(PDO $pdo, $trailId){
		// sanitize the the trailId before searching
		$trailId = filter_var($trailId, FILTER_VALIDATE_INT);
		if($trailId === false) {
			throw(new PDOException("$trailId is not an integer "));
		}
		If($trailId <= 0 ){
			throw(new PDOException("$trailId is not positive"));
		}
		// create query template
		$query = "SELECT uerId,ratingValue FROM rating WHERE trailId = :trailId";
		$statement = $pdo->prepare($query);

		// bind the tweet id to the place holder
	$parameters = array("trailId" => $trailId);
	$statement->execute($parameters);
	}

	/**
	 * gets a trailRating by trail Id and user Id
	 * @param PDO $pdo PDO connection object
	 * @param int $trailId trail id to search for
	 * @param int $userId user id to search for
	 * @return mixed Trail rating found or null if not found
	 * @throws PDOException
	 */

	public static function getRatingByTrailIdAndUserId(PDO $pdo, $trailId, $userId) {
		// sanitize the trailId before searching
		$trailId = filter_var($trailId, FILTER_VALIDATE_INT);
		if($trailId === false) {
			throw(new PDOException("trailId is not an integer"));
		}
		if($trailId <= 0) {
			throw(new PDOException("trailId is not positive"));
		}
		// sanitize the userId before searching
		$userId = filter_var($userId, FILTER_VALIDATE_INT);
		if($userId === false) {
			throw(new PDOException("userId is not an integer"));
		}
		if($userId <= 0) {
			throw(new PDOException("userId is not positive"));
		}

		//create query template
		$query = "SELECT trailId, userId, ratingValue FROM Rating WHERE trailId = :trailId AND userId = :userId";
		$statement = $pdo->prepare($query);

		//bind the trailId and UserId to the placeholder in the template
		$parameters = ["trailId" => $trailId, "userId" => $userId];
		$statement->execute($parameters);

		//grab the rating from mySQL
		try {
			$rating = null;
			$statement->setFetchMode(PDO::FETCH_ASSOC);
			$row = $statement->fetch();
			if($row !== false) {
				$rating = new rating($row["trailId"], $row["userId"], $row[""]);
			}
		} catch (Exception $exception) {
			// if the row couldn't be converted rethrow it
			throw(new PDOException($exception->getMessage(), 0, $exception));
		}
	return($rating);
	}


		/** gets all ratings
	 * @param PDO $pdo PDO connection object
	 * @return SplFixedArray all ratings found
	 *	@throws PDOException when mySQL errors occur
	 */
	public static  function getAllRatings(PDO $pdo) {
		//create query template
		$query = "select trailId, userId, trailRating FROM rating";
		$statement = $pdo->prepare($query);
		$statement->execute();

		// build an array of rating values
		$ratings = new SplFixedArray($statement->rowCount());
		$statement->setFetchMode(PDO::FETCH_ASSOC);
		while(($row = $statement->fetch()) !== false) {
			try {
				$rating = new Rating($row["userId"], $row["trailId"], $row["ratingValue"]);
				$ratings[$ratings->key()] = $rating;
				$ratings->next();
			} catch(Exception $exception) {
				// if the row couldn't be converted rethrow it
				throw(new PDOException($exception->getMessage(), 0, $exception));
			}
		}
		return($ratings);
	}
}